<?php declare(strict_types=1);
/*
 * Copyright 2020 Cristiano Cinotti
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace Susina\CodingStandard\Script;

use Composer\Script\Event;

class ComposerScripts
{
    public static function postInstall(Event $event)
    {
        $basePath = $event->getArguments()['basePath'] ?? __DIR__ . '/..';

        static::createStub($basePath);
        static::addScripts($basePath);
        static::updateGitignore($basePath);
    }

    private static function createStub(string $basePath): void
    {
        $stubFile = "$basePath/.php_cs.dist";

        if (!file_exists($stubFile)) {
            $content = '<?php declare(strict_types=1);
/* 
 * This file is a basic php-cs-fixer configuration generated by Susina/coding-standard.
 * Modify it as your choice.
 *
 */
  
$config = new Susina\CodingStandard\Config();
$config->getFinder()
    ->in(__DIR__ . "/src")
    ->in(__DIR__ . "/tests")
;

return $config;
';
            file_put_contents($stubFile, $content);
        }
    }

    private static function addScripts(string $basePath): void
    {
        $composer = json_decode(file_get_contents("$basePath/composer.json"), true);

        $composer['scripts'] = $composer['scripts'] ?? [];
        $composer['scripts']['cs'] = $composer['scripts']['cs'] ?? 'php-cs-fixer fix -v --diff --dry-run';
        $composer['scripts']['cs-fix'] = $composer['scripts']['cs-fix'] ?? 'php-cs-fixer fix -v --diff';

        file_put_contents("$basePath/composer.json", json_encode($composer, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES));
    }

    private static function updateGitignore(string $basePath): void
    {
        $gitignoreFile = "$basePath/.gitignore";

        if (file_exists($gitignoreFile)) {
            $content = rtrim(file_get_contents($gitignoreFile), "\n");

            if (false === strpos($content, '.php_cs.cache')) {
                file_put_contents($gitignoreFile, "$content\n.php_cs.cache\n");
            }
        }
    }
}
