<?php declare(strict_types=1);
/*
 * Copyright 2020-2021 Cristiano Cinotti
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace Susina\CodingStandard\Tests;

use org\bovigo\vfs\vfsStream;
use Susina\CodingStandard\Script\ComposerScripts;

class ComposerScriptsTest extends TestCase
{
    public function testPostInstall(): void
    {
        $expected = '<?php declare(strict_types=1);
/* 
 * This file is a basic php-cs-fixer configuration generated by Susina/coding-standard.
 * Modify it as your choice.
 *
 */
  
$config = new Susina\CodingStandard\Config();
$config->getFinder()
    ->in(__DIR__ . "/src")
    ->in(__DIR__ . "/tests")
;

return $config;
';
        $file = $this->getComposer();
        ComposerScripts::postInstall($this->getEvent());

        $this->assertFileExists($this->getRoot()->url() . '/.php_cs.dist');
        $this->assertEquals($expected, file_get_contents($this->getRoot()->url() . '/.php_cs.dist'));

        $composer = json_decode(file_get_contents($file->url()), true);

        $this->assertIsArray($composer);
        $this->assertArrayHasKey('scripts', $composer);
        $this->assertArrayHasKey('cs', $composer['scripts']);
        $this->assertArrayHasKey('cs-fix', $composer['scripts']);
        $this->assertEquals('php-cs-fixer fix -v --diff --dry-run', $composer['scripts']['cs']);
        $this->assertEquals('php-cs-fixer fix -v --diff', $composer['scripts']['cs-fix']);

        $this->assertFalse(file_exists($this->getRoot()->url() . '.gitignore'));
    }

    public function testPostInstallWithComposerScriptParam(): void
    {
        $file = $this->getComposerWithScripts();
        ComposerScripts::postInstall($this->getEvent());

        $composer = json_decode($file->getContent(), true);

        $this->assertArrayHasKey('scripts', $composer);
        $this->assertArrayHasKey('cs', $composer['scripts']);
        $this->assertArrayHasKey('cs-fix', $composer['scripts']);
        $this->assertEquals('php-cs-fixer fix -v --diff --dry-run', $composer['scripts']['cs']);
        $this->assertEquals('php-cs-fixer fix -v --diff', $composer['scripts']['cs-fix']);
        $this->assertArrayHasKey('post-install-cmd', $composer['scripts']);
        $this->assertEquals(
            ['Susina\\CodingStandard\\Script\\ComposerScripts::postInstall'],
            $composer['scripts']['post-install-cmd']
        );
    }

    public function testPostInstallNotOverwriteCsScript(): void
    {
        $file = $this->getComposerWithCsScript();
        ComposerScripts::postInstall($this->getEvent());

        $composer = json_decode($file->getContent(), true);

        $this->assertArrayHasKey('scripts', $composer);
        $this->assertArrayHasKey('cs', $composer['scripts']);
        $this->assertArrayHasKey('cs-fix', $composer['scripts']);
        $this->assertEquals('cs script already present', $composer['scripts']['cs']);
        $this->assertEquals('php-cs-fixer fix -v --diff', $composer['scripts']['cs-fix']);
    }

    public function testPostInstallNotOverwriteScripts(): void
    {
        $file = $this->getComposerWithBothCsScripts();
        ComposerScripts::postInstall($this->getEvent());

        $composer = json_decode($file->getContent(), true);

        $this->assertArrayHasKey('scripts', $composer);
        $this->assertArrayHasKey('cs', $composer['scripts']);
        $this->assertArrayHasKey('cs-fix', $composer['scripts']);
        $this->assertEquals('cs script already present', $composer['scripts']['cs']);
        $this->assertEquals('cs-fix script already present', $composer['scripts']['cs-fix']);
        $this->assertArrayHasKey('post-install-cmd', $composer['scripts']);
        $this->assertEquals(
            ['Susina\\CodingStandard\\Script\\ComposerScripts::postInstall'],
            $composer['scripts']['post-install-cmd']
        );
    }

    public function testModifyGitignore(): void
    {
        $expected = "
composer.phar
/vendor
.php_cs.cache
";
        $file = vfsStream::newFile('.gitignore')
            ->at($this->getRoot())
            ->setContent(
                "
composer.phar
/vendor
"
            );

        //This instruction creates a composer.json file into the virtual filesystem
        $composer = $this->getComposer();
        ComposerScripts::postInstall($this->getEvent());

        $this->assertEquals($expected, file_get_contents($file->url()));
    }

    public function testDoesNotAddTwiceToGitignore(): void
    {
        $expected = "
composer.phar
.php_cs.cache
/vendor
";
        $file = vfsStream::newFile('.gitignore')
            ->at($this->getRoot())
            ->setContent(
                "
composer.phar
.php_cs.cache
/vendor
"
            );

        //This instruction creates a composer.json file into the virtual filesystem
        $composer = $this->getComposer();
        ComposerScripts::postInstall($this->getEvent());

        $this->assertEquals($expected, file_get_contents($file->url()));
    }
}
